version: '3.8'

services:
  # PostgreSQL database for local development
  postgres:
    image: postgres:15-alpine
    container_name: jeticu-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-jeticu_dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dockerpass}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - jeticu-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django backend API
  backend:
    build:
      context: ./backend
      dockerfile: ${BACKEND_DOCKERFILE:-Dockerfile.dev}
      args:
        PYTHON_VERSION: "3.10"
    container_name: jeticu-backend
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8001:8001"
    env_file:
      - ${ENV_FILE:-.env.docker}
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-backend.settings.docker}
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - jeticu-network
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8001
      "

  # Vue frontend (development with hot-reload)
  frontend:
    build:
      context: ./frontend
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile.dev}
      args:
        NODE_VERSION: "18"
    container_name: jeticu-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent node_modules from being overwritten
    ports:
      - "5173:5173"
    environment:
      - VITE_APP_API_URL=${VITE_APP_API_URL:-http://localhost:8001/api}
      - CHOKIDAR_USEPOLLING=true  # For hot-reload in Docker
    networks:
      - jeticu-network
    command: npm run dev -- --host 0.0.0.0

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: jeticu-redis
    ports:
      - "6379:6379"
    networks:
      - jeticu-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

networks:
  jeticu-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local