version: '3.8'

services:
  # No postgres service in production - using Azure Database for PostgreSQL
  postgres:
    deploy:
      replicas: 0  # Disable postgres container in production

  # Django backend API - Production configuration
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: jeticu-backend-prod
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./backend/documents:/app/documents  # Persistent document storage
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings.production
      # Azure Database connection will be set via env file
    networks:
      - jeticu-network
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue frontend - Production build served by Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_VERSION: "18"
    container_name: jeticu-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates
      - static_volume:/usr/share/nginx/html/static:ro
    environment:
      - NGINX_HOST=${NGINX_HOST:-jeticu.com}
      - NGINX_PORT=80
    networks:
      - jeticu-network
    depends_on:
      - backend

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: jeticu-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
    networks:
      - jeticu-network
    depends_on:
      - backend
      - frontend

  # Redis remains the same for production
  redis:
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

# Production-specific configurations
networks:
  jeticu-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  static_volume:
    driver: local
  media_volume:
    driver: local
  redis_data:
    driver: local