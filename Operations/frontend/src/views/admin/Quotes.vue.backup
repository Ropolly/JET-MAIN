<template>
  <!--begin::Card-->
  <div class="card">
        <!--begin::Card header-->
        <div class="card-header border-0 pt-6">
          <!--begin::Card title with search-->
          <div class="card-title">
            <!--begin::Search-->
            <div class="d-flex align-items-center position-relative my-1">
              <KTIcon
                icon-name="magnifier"
                icon-class="fs-1 position-absolute ms-6"
              />
              <input
                v-model="search"
                @input="searchItems()"
                type="text"
                class="form-control form-control-solid w-250px ps-14"
                placeholder="Search Quotes"
              />
            </div>
            <!--end::Search-->

            <!--begin::Selected actions (when items selected)-->
            <div v-if="selectedIds.length > 0" class="d-flex align-items-center ms-5">
              <div class="fw-bold me-5">
                <span class="me-2">{{ selectedIds.length }}</span>Selected
              </div>
              <button
                type="button"
                class="btn btn-danger btn-sm"
                @click="deleteFewQuotes()"
              >
                Delete Selected
              </button>
            </div>
            <!--end::Selected actions-->
          </div>
          <!--end::Card title with search-->

          <!--begin::Card toolbar with tabs-->
          <div class="card-toolbar">
            <ul class="nav nav-tabs nav-line-tabs nav-stretch fs-6 border-0">
              <li class="nav-item">
                <a 
                  class="nav-link"
                  :class="{ active: activeTab === 'all' }"
                  @click.prevent="activeTab = 'all'"
                  data-bs-toggle="tab"
                  href="#kt_tab_all_quotes"
                >
                  All Quotes
                  <span class="ms-1 badge" :class="activeTab === 'all' ? 'badge-secondary' : 'badge-light-secondary'">{{ getAllQuotesCount() }}</span>
                </a>
              </li>
              <li class="nav-item">
                <a 
                  class="nav-link"
                  :class="{ active: activeTab === 'pending' }"
                  @click.prevent="activeTab = 'pending'"
                  data-bs-toggle="tab"
                  href="#kt_tab_pending_quotes"
                >
                  Pending
                  <span class="ms-1 badge" :class="activeTab === 'pending' ? 'badge-warning' : 'badge-light-secondary'">{{ getStatusCount('pending') }}</span>
                </a>
              </li>
              <li class="nav-item">
                <a 
                  class="nav-link"
                  :class="{ active: activeTab === 'confirmed' }"
                  @click.prevent="activeTab = 'confirmed'"
                  data-bs-toggle="tab"
                  href="#kt_tab_confirmed_quotes"
                >
                  Confirmed
                  <span class="ms-1 badge" :class="activeTab === 'confirmed' ? 'badge-info' : 'badge-light-secondary'">{{ getStatusCount('confirmed') }}</span>
                </a>
              </li>
              <li class="nav-item">
                <a 
                  class="nav-link"
                  :class="{ active: activeTab === 'active' }"
                  @click.prevent="activeTab = 'active'"
                  data-bs-toggle="tab"
                  href="#kt_tab_active_quotes"
                >
                  Active
                  <span class="ms-1 badge" :class="activeTab === 'active' ? 'badge-success' : 'badge-light-secondary'">{{ getStatusCount('active') }}</span>
                </a>
              </li>
              <li class="nav-item">
                <a 
                  class="nav-link"
                  :class="{ active: activeTab === 'completed' }"
                  @click.prevent="activeTab = 'completed'"
                  data-bs-toggle="tab"
                  href="#kt_tab_completed_quotes"
                >
                  Completed
                  <span class="ms-1 badge" :class="activeTab === 'completed' ? 'badge-primary' : 'badge-light-secondary'">{{ getStatusCount('completed') }}</span>
                </a>
              </li>
              <li class="nav-item">
                <a 
                  class="nav-link"
                  :class="{ active: activeTab === 'cancelled' }"
                  @click.prevent="activeTab = 'cancelled'"
                  data-bs-toggle="tab"
                  href="#kt_tab_cancelled_quotes"
                >
                  Cancelled
                  <span class="ms-1 badge" :class="activeTab === 'cancelled' ? 'badge-danger' : 'badge-light-secondary'">{{ getStatusCount('cancelled') }}</span>
                </a>
              </li>
              <li class="nav-item">
                <a 
                  class="nav-link"
                  :class="{ active: activeTab === 'paid' }"
                  @click.prevent="activeTab = 'paid'"
                  data-bs-toggle="tab"
                  href="#kt_tab_paid_quotes"
                >
                  Paid
                  <span class="ms-1 badge" :class="activeTab === 'paid' ? 'badge-success' : 'badge-light-secondary'">{{ getStatusCount('paid') }}</span>
                </a>
              </li>
            </ul>
          </div>
          <!--end::Card toolbar with tabs-->
        </div>
        <!--end::Card header-->

    <!--begin::Card body-->
    <div class="card-body pt-0">
      <KTDatatable
        @on-sort="sort"
        @on-items-select="onItemSelect"
        @on-items-per-page-change="onItemsPerPageChange"
        :data="filteredQuotes"
        :header="headerConfig"
        :checkbox-enabled="true"
        :loading="loading"
      >
        <template v-slot:quote="{ row: quote }">
          <div class="d-flex align-items-center">
            <div class="symbol symbol-circle symbol-50px overflow-hidden me-3">
              <div class="symbol-label bg-light-warning">
                <i class="ki-duotone ki-price-tag fs-2x text-warning">
                  <span class="path1"></span>
                  <span class="path2"></span>
                  <span class="path3"></span>
                </i>
              </div>
            </div>
            <div class="d-flex flex-column">
              <a href="#" @click="navigateToQuote(quote.id)" class="text-gray-800 text-hover-primary mb-1 fs-6 fw-bold">
                #{{ quote.id.slice(0, 8) }}
              </a>
              <span class="text-muted fs-7">{{ formatDate(quote.created_on) }}</span>
            </div>
          </div>
        </template>

        <template v-slot:contact="{ row: quote }">
          <div class="d-flex flex-column">
            <a @click="navigateToContact(quote)" 
               href="#" 
               class="text-dark fw-bold text-hover-primary fs-6">
              {{ getContactName(quote) }}
            </a>
            <span class="text-muted fs-7">{{ getPatientName(quote) }}</span>
          </div>
        </template>

        <template v-slot:route="{ row: quote }">
          <div class="d-flex flex-column">
            <span class="text-dark fw-semibold fs-6">
              {{ getAirportCode(quote.pickup_airport) }} â†’ {{ getAirportCode(quote.dropoff_airport) }}
            </span>
            <span class="text-muted fs-7">{{ getAircraftType(quote.aircraft_type) }}</span>
          </div>
        </template>

        <template v-slot:amount="{ row: quote }">
          <span class="text-dark fw-bold fs-6">
            {{ formatCurrency(quote.quoted_amount) }}
          </span>
        </template>

        <template v-slot:status="{ row: quote }">
          <span :class="`badge badge-light-${getStatusColor(quote.status)} fs-7 fw-bold`">
            {{ quote.status }}
          </span>
        </template>

        <template v-slot:pdf_status="{ row: quote }">
          <span :class="`badge badge-light-${getPdfStatusColor(quote.quote_pdf_status)} fs-8 fw-bold`">
            {{ quote.quote_pdf_status }}
          </span>
        </template>

        <template v-slot:actions="{ row: quote }">
          <a
            href="#"
            class="btn btn-sm btn-light btn-active-light-primary"
            data-kt-menu-trigger="click"
            data-kt-menu-placement="bottom-end"
            data-kt-menu-flip="top-end"
            >Actions
            <KTIcon icon-name="down" icon-class="fs-5 m-0" />
          </a>
          <!--begin::Menu-->
          <div
            class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-200px py-4"
            data-kt-menu="true"
          >
            <!--begin::Menu item-->
            <div class="menu-item px-3">
              <a @click="handleView(quote)" class="menu-link px-3"
                >View Quote</a
              >
            </div>
            <!--end::Menu item-->
            <!--begin::Menu item-->
            <div class="menu-item px-3">
              <a @click="handleEdit(quote)" class="menu-link px-3"
                >Edit Quote</a
              >
            </div>
            <!--end::Menu item-->
            <!--begin::Menu item-->
            <div class="menu-item px-3">
              <a @click="handleCreateTrip(quote)" class="menu-link px-3"
                >Create Trip</a
              >
            </div>
            <!--end::Menu item-->
            <!--begin::Menu item-->
            <div class="menu-item px-3">
              <a @click="handleDownloadPdf(quote)" class="menu-link px-3"
                >Download PDF</a
              >
            </div>
            <!--end::Menu item-->
            <!--begin::Menu item-->
            <div class="menu-item px-3">
              <a @click="handleEmailQuote(quote)" class="menu-link px-3"
                >Email Quote</a
              >
            </div>
            <!--end::Menu item-->
            <div class="separator mt-3 opacity-75"></div>
            <!--begin::Menu item-->
            <div class="menu-item px-3">
              <a @click="handleDelete(quote)" class="menu-link px-3 text-danger"
                >Delete</a
              >
            </div>
            <!--end::Menu item-->
          </div>
          <!--end::Menu-->
        </template>
      </KTDatatable>
    </div>
    <!--end::Card body-->
  </div>
  <!--end::Card-->
  
  <!-- Create Quote Modal -->
  <CreateQuoteModal @quote-created="handleQuoteCreated" />
</template>

<script lang="ts">
import { defineComponent, ref, computed, onMounted, onUnmounted } from "vue";
import { useRouter } from "vue-router";
import ApiService from "@/core/services/ApiService";
import KTDatatable from "@/components/kt-datatable/KTDataTable.vue";
import type { Sort } from "@/components/kt-datatable/table-partials/models";
import arraySort from "array-sort";
import { MenuComponent } from "@/assets/ts/components";
import Swal from "sweetalert2";
import { useToolbarStore } from "@/stores/toolbar";
import { Modal } from "bootstrap";
import CreateQuoteModal from "@/components/modals/CreateQuoteModal.vue";

interface Quote {
  id: string;
  quoted_amount: string;
  contact: {
    id: string;
    first_name: string;
    last_name: string;
    business_name: string;
    email: string;
    contact_type: string;
  };
  patient: {
    id: string;
    status: string;
  } | null;
  pickup_airport: {
    id: string;
    iata_code: string;
    icao_code: string;
    name: string;
    city: string;
    state: string;
  };
  dropoff_airport: {
    id: string;
    iata_code: string;
    icao_code: string;
    name: string;
    city: string;
    state: string;
  };
  aircraft_type?: string;
  medical_team?: string;
  status: string;
  quote_pdf_status?: string;
  created_on: string;
}

export default defineComponent({
  name: "quotes-management",
  components: {
    KTDatatable,
    CreateQuoteModal,
  },
  setup() {
    const router = useRouter();
    const toolbarStore = useToolbarStore();
    const quotes = ref<Quote[]>([]);
    const loading = ref(false);
    const error = ref<string | null>(null);
    const activeTab = ref<string>("all");

    const headerConfig = ref([
      {
        columnName: "Quote",
        columnLabel: "quote",
        sortEnabled: true,
      },
      {
        columnName: "Contact/Patient",
        columnLabel: "contact",
        sortEnabled: false,
      },
      {
        columnName: "Route",
        columnLabel: "route",
        sortEnabled: false,
      },
      {
        columnName: "Amount",
        columnLabel: "amount",
        sortEnabled: true,
      },
      {
        columnName: "Status",
        columnLabel: "status",
        sortEnabled: true,
      },
      {
        columnName: "PDF Status",
        columnLabel: "pdf_status",
        sortEnabled: true,
      },
      {
        columnName: "Actions",
        columnLabel: "actions",
      },
    ]);

    const initData = ref<Array<Quote>>([]);
    const selectedIds = ref<Array<number>>([]);
    const search = ref<string>("");

    // Methods
    const fetchQuotes = async () => {
      try {
        loading.value = true;
        error.value = null;
        const { data } = await ApiService.get("/quotes/");
        quotes.value = data.results || data;
        initData.value.splice(0, quotes.value.length, ...quotes.value);
      } catch (err: any) {
        error.value = err.response?.data?.detail || "Failed to fetch quotes";
        console.error("Error fetching quotes:", err);
      } finally {
        loading.value = false;
      }
    };

    const handleCreate = () => {
      const modalElement = document.getElementById('kt_modal_create_quote');
      if (modalElement) {
        try {
          const modal = new Modal(modalElement);
          modal.show();
        } catch (error) {
          console.error('Error opening modal:', error);
        }
      }
    };
    
    const handleQuoteCreated = (newQuote: any) => {
      fetchQuotes(); // Refresh the list
    };

    const handleEdit = (quote: Quote) => {
      Swal.fire({
        title: "Edit Quote",
        text: `Edit form for quote #${quote.id.slice(0, 8)} would open here`,
        icon: "info",
        confirmButtonText: "OK"
      });
    };

    const handleCreateTrip = (quote: Quote) => {
      Swal.fire({
        title: "Create Trip",
        text: `Create trip from quote #${quote.id.slice(0, 8)}?`,
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "Yes, create trip!",
        cancelButtonText: "Cancel"
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire("Trip Created!", "Trip has been created successfully.", "success");
        }
      });
    };

    const handleDownloadPdf = (quote: Quote) => {
      Swal.fire({
        title: "Download PDF",
        text: `Download PDF for quote #${quote.id.slice(0, 8)}`,
        icon: "info",
        confirmButtonText: "OK"
      });
    };

    const handleEmailQuote = (quote: Quote) => {
      Swal.fire({
        title: "Email Quote",
        text: `Send quote #${quote.id.slice(0, 8)} via email?`,
        icon: "question",
        showCancelButton: true,
        confirmButtonText: "Send",
        cancelButtonText: "Cancel"
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire("Email Sent!", "Quote has been emailed successfully.", "success");
        }
      });
    };

    const handleView = (quote: Quote) => {
      router.push(`/admin/quotes/${quote.id}`);
    };

    const handleDelete = async (quote: Quote) => {
      const result = await Swal.fire({
        title: "Delete Quote",
        text: `Are you sure you want to delete quote #${quote.id.slice(0, 8)}?`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "Cancel"
      });
      
      if (result.isConfirmed) {
        try {
          await ApiService.delete(`/quotes/${quote.id}/`);
          await fetchQuotes(); // Refresh the list
          Swal.fire("Deleted!", "Quote has been deleted.", "success");
        } catch (error: any) {
          console.error('Error deleting quote:', error);
          Swal.fire("Error!", "Failed to delete quote. Please try again.", "error");
        }
      }
    };

    const getContactName = (quote: Quote): string => {
      if (quote.contact.business_name) {
        return quote.contact.business_name;
      }
      if (quote.contact.first_name || quote.contact.last_name) {
        return `${quote.contact.first_name || ''} ${quote.contact.last_name || ''}`.trim();
      }
      return 'Unknown Contact';
    };

    const getPatientName = (quote: Quote): string => {
      if (quote.patient) {
        return `Patient (Status: ${quote.patient.status})`;
      }
      return 'No patient assigned';
    };

    const navigateToContact = (quote: Quote) => {
      if (quote.contact) {
        if (quote.contact.contact_type === 'Patient') {
          router.push(`/admin/contacts/patients/${quote.patient?.id}`);
        } else {
          router.push(`/admin/contacts/contacts/${quote.contact.id}`);
        }
      }
    };

    const navigateToQuote = (quoteId: string) => {
      router.push(`/admin/quotes/${quoteId}`);
    };

    const getAirportCode = (airport: any): string => {
      if (!airport) return 'TBD';
      return airport.iata_code || airport.icao_code || 'UNK';
    };

    const getAircraftType = (aircraftType: string): string => {
      const types: Record<string, string> = {
        '65': 'Learjet 65',
        '35': 'Learjet 35',
        'TBD': 'To Be Determined'
      };
      return types[aircraftType] || aircraftType;
    };

    const formatCurrency = (amount: string | number): string => {
      const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(numAmount);
    };

    const formatDate = (dateString: string): string => {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    };

    const getStatusColor = (status: string): string => {
      const colors: Record<string, string> = {
        pending: 'warning',
        confirmed: 'info',
        active: 'primary',
        completed: 'success',
        cancelled: 'danger',
        paid: 'success',
      };
      return colors[status] || 'secondary';
    };

    const getPdfStatusColor = (status: string): string => {
      const colors: Record<string, string> = {
        created: 'info',
        pending: 'warning',
        modified: 'primary',
        accepted: 'success',
        denied: 'danger',
      };
      return colors[status] || 'secondary';
    };

    const deleteFewQuotes = () => {
      selectedIds.value.forEach((item) => {
        deleteQuote(item);
      });
      selectedIds.value.length = 0;
    };

    const deleteQuote = (id: number) => {
      for (let i = 0; i < quotes.value.length; i++) {
        if (quotes.value[i].id === id.toString()) {
          quotes.value.splice(i, 1);
        }
      }
    };

    const sort = (sort: Sort) => {
      const reverse: boolean = sort.order === "asc";
      if (sort.label) {
        arraySort(quotes.value, sort.label, { reverse });
      }
    };

    const onItemSelect = (selectedItems: Array<number>) => {
      selectedIds.value = selectedItems;
    };

    const searchItems = () => {
      quotes.value.splice(0, quotes.value.length, ...initData.value);
      if (search.value !== "") {
        let results: Array<Quote> = [];
        for (let j = 0; j < initData.value.length; j++) {
          if (searchingFunc(initData.value[j], search.value)) {
            results.push(initData.value[j]);
          }
        }
        quotes.value.splice(0, quotes.value.length, ...results);
      }
      MenuComponent.reinitialization();
    };

    const searchingFunc = (obj: any, value: string): boolean => {
      for (let key in obj) {
        if (!Number.isInteger(obj[key]) && !(typeof obj[key] === "object")) {
          if (obj[key]?.toString().toLowerCase().indexOf(value.toLowerCase()) != -1) {
            return true;
          }
        }
      }
      return false;
    };

    const onItemsPerPageChange = () => {
      setTimeout(() => {
        MenuComponent.reinitialization();
      }, 0);
    };

    // Computed properties
    const filteredQuotes = computed(() => {
      if (activeTab.value === 'all') {
        return quotes.value;
      }
      return quotes.value.filter(quote => quote.status === activeTab.value);
    });

    // Tab count methods
    const getAllQuotesCount = () => quotes.value.length;
    
    const getStatusCount = (status: string) => {
      return quotes.value.filter(quote => quote.status === status).length;
    };

    onMounted(() => {
      fetchQuotes();
      // Ensure menus are properly initialized
      setTimeout(() => {
        MenuComponent.reinitialization();
      }, 100);
      
      // Set toolbar actions
      toolbarStore.setActions([
        {
          id: 'add-quote',
          label: 'Add Quote',
          icon: 'plus',
          variant: 'primary',
          handler: handleCreate
        }
      ]);
    });
    
    onUnmounted(() => {
      // Clear toolbar actions when component is destroyed
      toolbarStore.clearActions();
    });

    return {
      search,
      searchItems,
      quotes,
      filteredQuotes,
      activeTab,
      headerConfig,
      loading,
      error,
      sort,
      onItemSelect,
      selectedIds,
      deleteFewQuotes,
      deleteQuote,
      onItemsPerPageChange,
      handleCreate,
      handleQuoteCreated,
      handleCreateTrip,
      handleDownloadPdf,
      handleEmailQuote,
      handleEdit,
      handleView,
      handleDelete,
      getContactName,
      getPatientName,
      navigateToContact,
      navigateToQuote,
      getAirportCode,
      getAircraftType,
      formatCurrency,
      formatDate,
      getStatusColor,
      getPdfStatusColor,
      getAllQuotesCount,
      getStatusCount,
    };
  },
});
</script>